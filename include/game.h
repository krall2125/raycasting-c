#pragma once

#include <SDL2/SDL_events.h>
#include <SDL2/SDL_stdinc.h>
#include <vec2.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_error.h>
#include <SDL2/SDL_hints.h>
#include <SDL2/SDL_pixels.h>
#include <SDL2/SDL_render.h>
#include <SDL2/SDL_surface.h>
#include <SDL2/SDL_video.h>
#include <stdint.h>
#include <stdbool.h>

#define WIDTH 1920
#define HEIGHT 1080

#define PI 3.14159265359

#define RAD (PI / 180)

typedef struct sector {
    int type;
    float height;
} sector_t;

static int map_data[32][32] = {
    1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,
    1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,0,0,0,1,0,0,1,
    1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,1,1,
    1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,
    1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,
    1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,
    1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,
    1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,
    1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,1,0,0,1,
    1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,
    1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,1,0,0,1,0,0,0,0,0,1,
    1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,
    1,2,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,3,0,0,0,0,0,0,0,1,0,0,1,0,0,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
};

typedef struct player {
    vec2_t pos;
    float fov;
    float yaw, pitch;
    vec2_t delta;
} player_t;

typedef struct game {
    SDL_Renderer *renderer;
    SDL_Window *window;
    float fps;
    uint32_t *pixels;
} game_t;

float clamp_angle(float angle);

game_t *init_game(const char *title, int width, int height);

void render_prepare(game_t *game);

void render_present(game_t *game);

void draw_player(game_t *game, player_t *player);

void draw_grid(game_t *game);

void draw_box(game_t *game, int xo, int yo);

void draw_map(int map[32][32], game_t *game);

void key_input(game_t *game, player_t *player);

void mouse_move(game_t *game, player_t *player, int xrel, int yrel);

void loop(game_t *game, player_t *player);

SDL_Surface *load_texture(const char *filename);
